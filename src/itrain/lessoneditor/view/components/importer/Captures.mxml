<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 width="100%"
		 height="100%"
		 clipAndEnableScrolling="true"
		 preinitialize="onPreinitialize()"
		 initialize="onInitialize()"
		 implements="itrain.lessoneditor.model.ISlidePreviewer"
		 xmlns:imp="itrain.lessoneditor.view.components.importer.*">
	<fx:Script>
		<![CDATA[
			import itrain.common.utils.Embeded;
		]]>
	</fx:Script>
	<fx:Declarations>
		<s:Move id="showPreviewEffect"
				xFrom="0"
				xTo="{-this.width}"
				target="{movableContainer}"/>
		<s:Move id="hidePreviewEffect"
				xFrom="{-this.width}"
				xTo="0"
				target="{movableContainer}"/>
		<s:DateTimeFormatter id="dateTimeFormatter"
							 dateTimePattern="dd MMM yyyy, h:mm a"/>
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import spark.events.GridEvent;
			import spark.events.GridSelectionEvent;
			import mx.binding.utils.BindingUtils;
			import itrain.lessoneditor.model.SlideCaptureVO;
			import itrain.common.events.CaptureImporterEvent;
			import itrain.common.events.CaptureLoaderEvent;
			import itrain.lessoneditor.model.CaptureImportModel;
			import itrain.lessoneditor.model.CaptureVO;
			import itrain.lessoneditor.model.EnumSelection;
			import itrain.lessoneditor.model.ISlidePreviewer;
			import itrain.lessoneditor.view.renderers.CaptureSlideRenderer;

			import mx.collections.ArrayCollection;

			[Bindable]
			[Inject]
			public var model:CaptureImportModel;

			[Dispatcher]
			public var dispatcher:IEventDispatcher;

			[Bindable]
			public var runPreviewHandler:Function;

			[Bindable]
			public var hidePreviewHandler:Function;
			
			[Bindable]
			public var firstTimeRun:Boolean;

			private var _enablePreview:Boolean=false;

			[Bindable]

			private var _mockDataProvider:ArrayCollection; // for better list performance

			[Bindable]
			public function get enablePreview():Boolean
			{
				return _enablePreview;
			}

			public function set enablePreview(value:Boolean):void
			{
				_enablePreview=value;
			}

			public function deselect():void
			{
				dgCaptureList.selectedItem=null;
				onCaptureListSelectionChange();
			}

			private function onPreinitialize():void
			{
				generatePreviewMockDataProvider();
			}

			public function capturesShown():void
			{
				if (dgCaptureList.dataProvider)
				{
					onRefereshClick();
				}
				else
				{
					BindingUtils.bindProperty(dgCaptureList, "dataProvider", model, "captures");
				}
			}

			private function generatePreviewMockDataProvider(count:int=30):void
			{
				_mockDataProvider=new ArrayCollection();
				for (var i:int=0; i < count; i++)
				{
					_mockDataProvider.addItem({});
				}
			}

			public function showPreview():void
			{
				if (movableContainer.x != -this.width)
				{
					lstPreview.dataProvider=model.captureSlides;

					if (hidePreviewEffect.isPlaying)
						hidePreviewEffect.stop();
					if (!showPreviewEffect.isPlaying)
						showPreviewEffect.play();
				}
			}

			public function hidePreview():void
			{
				if (movableContainer.x != 0)
				{
					if (showPreviewEffect.isPlaying)
						showPreviewEffect.stop();
					if (!hidePreviewEffect.isPlaying)
						hidePreviewEffect.play();
				}
			}

			[Mediate(event="CaptureImporterEvent.IMPORT_SELECTION_CHANGED")]
			public function onImportSelectionChanged(cie:CaptureImporterEvent):void
			{
				var scVO:SlideCaptureVO=cie.additionalData as SlideCaptureVO;
				var selectedArray:Vector.<Object>=lstPreview.selectedItems;
				if (selectedArray.indexOf(scVO) > -1)
				{
					if (selectedArray.length > 1)
					{
						for each (var s:SlideCaptureVO in selectedArray)
						{
							s.selected=scVO.selected;
						}
					}
				}
			}

			private function onCaptureListSelectionChange():void
			{
				if (model)
				{
					model.selectedCapture=dgCaptureList.selectedItem as CaptureVO;
					enablePreview=dgCaptureList.selectedItem != null;

					model.allSlidesSelected=EnumSelection.SELECTED;
				}
			}

			private function onDataGridDoubleClick(e:GridEvent):void
			{
				if (dgCaptureList.selectedItem)
				{
					var capture:CaptureVO=e.item as CaptureVO;
					if (capture.timeStamp && capture.source)
					{
						if (runPreviewHandler != null)
							runPreviewHandler();
						showPreview();
					}
				}
			}

			private function onRefereshClick():void
			{
				deselect();
				model.loadCaptures();
			}

			private function dateColumnLabelFunction(item:CaptureVO, column:GridColumn):String
			{
				return dateTimeFormatter.format(item.timeStamp);
			}

			private function onListDoubleClick(e:Event=null):void
			{
				if (hidePreviewHandler != null)
					hidePreviewHandler();
				hidePreview();
			}

			private function onAssociatedChange():void
			{
				model.setOnlyAssociated(cbxAssociated.selected);
			}

			private function onInitialize():void
			{
				lstPreview.addEventListener(CaptureSlideRenderer.ITEM_DOUBLE_CLICKED, onListDoubleClick);
			}

			private function onDataGridSelectionChanging(e:GridSelectionEvent):void
			{
				if (e.selectionChange.rowIndex > -1 && e.selectionChange.rowIndex < model.captures.length)
				{
					var item:CaptureVO=model.captures.getItemAt(e.selectionChange.rowIndex) as CaptureVO;
					if (!(item.timeStamp && item.source))
						e.preventDefault();
				}
			}
		]]>
	</fx:Script>
	<s:HGroup id="movableContainer"
			  height="100%"
			  gap="0">
		<s:VGroup width="{this.width}"
				  height="100%">
			<imp:NewCaptureGroup id="newCaptureGroup"/>
			<s:DataGrid id="dgCaptureList"
						width="100%"
						height="100%"
						selectionChanging="onDataGridSelectionChanging(event)"
						selectionChange="onCaptureListSelectionChange()"
						doubleClickEnabled="true"
						gridDoubleClick="onDataGridDoubleClick(event)"
						requestedRowCount="10">
				<s:columns>
					<mx:ArrayList>
						<s:GridColumn headerText="Lesson Name"
									  dataField="lessonName"
									  width="{dgCaptureList.width * .5}"/>
						<s:GridColumn headerText="Capture Id"
									  dataField="id"/>
						<s:GridColumn headerText="Timestamp"
									  dataField="timeStamp"
									  labelFunction="dateColumnLabelFunction"
									  width="{dgCaptureList.width * .25}"/>
					</mx:ArrayList>
				</s:columns>
			</s:DataGrid>
			<s:HGroup width="100%"
					  verticalAlign="middle">
				<s:CheckBox id="cbxAssociated"
							label="Only show Screen Captures associated with this Lesson"
							enabled="{!model.loadingCaptureList}"
							selected="{model.onlyAssociatedCaptures}"
							change="onAssociatedChange()"/>
				<s:Spacer width="100%"/>
				<mx:LinkButton icon="{Embeded.REFRESH_ICON}"
							   label="Refresh"
							   click="onRefereshClick()"
							   enabled="{!model.loadingCaptureList}"
							   cornerRadius="5"/>
			</s:HGroup>
		</s:VGroup>
		<s:Group width="{this.width}"
				 height="100%"
				 clipAndEnableScrolling="true">
			<s:List id="lstPreview"
					width="100%"
					height="100%"
					allowMultipleSelection="true"
					typicalItem="{{}}"
					dataProvider="{_mockDataProvider}"
					itemRenderer="itrain.lessoneditor.view.renderers.CaptureSlideRenderer"
					borderVisible="false"
					useVirtualLayout="true">
				<s:layout>
					<s:TileLayout useVirtualLayout="true"/>
				</s:layout>
			</s:List>
		</s:Group>
	</s:HGroup>
</s:Group>
