<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:importer="itrain.lessoneditor.view.components.importer.*"
		 filters="{[Common.dropShadow]}"
		 showEffect="{efShow}"
		 hideEffect="{efHide}"
		 title="Reporting issue on Capture {captureId}"
		 close="onButtonClick(cancelHandler)">
	<fx:Declarations>
		<s:Fade id="efShow"
				alphaFrom="0.0"
				alphaTo="1.0"/>
		<s:Fade id="efHide"
				alphaFrom="1.0"
				alphaTo="0.0"
				effectEnd="{clearText();}"/>
		<importer:CaptureIssueConfirmation id="cicPopUp" closeHandler="{popUpCloseHandler}"/>
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import itrain.common.events.CaptureLoaderEvent;
			import itrain.common.utils.Common;
			
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.managers.PopUpManager;

			[Bindable]
			public var cancelHandler:Function;

			[Bindable]
			public var sendHandler:Function;
			
			[Bindable]
			public var captureId:int;

			private function onButtonClick(handler:Function):void {
				if (handler != null) {
					handler();
				}
			}

			public function get report():String {
				return txtReport.text;
			}

			public function clearText():void {
				txtReport.text="";
			}

			override public function set visible(value:Boolean):void {
				super.visible=value;
				if (value) {
					parentApplication.addEventListener(MouseEvent.CLICK, onClick, true);
				} else {
					this.removeEventListener(MouseEvent.CLICK, onClick, true);
				}
			}

			private function onClick(e:MouseEvent):void {
				if (!isMouseOverWindow()) {
					onButtonClick(cancelHandler);
				}
			}

			private function isMouseOverWindow():Boolean {
				return mouseX > 0 && mouseY > 0 && mouseX < width && mouseY < height;
			}
			
			[Mediate(event="CaptureLoaderEvent.REPORT_SENT")]
			public function onReportDelivery(cle:CaptureLoaderEvent):void {
				cicPopUp.htmlText = cle.additionalData as String;
				PopUpManager.addPopUp(cicPopUp, parentApplication as DisplayObject);
				PopUpManager.centerPopUp(cicPopUp);
			}
			
			private function popUpCloseHandler():void {
				PopUpManager.removePopUp(cicPopUp);
			}
		]]>
	</fx:Script>
	<s:Rect width="100%"
			height="100%">
		<s:fill>
			<s:SolidColor color="#DEE0E7"/>
		</s:fill>
		<s:stroke>
			<s:SolidColorStroke color="#FFFFFF"/>
		</s:stroke>
	</s:Rect>
	<s:VGroup width="100%"
			  height="100%"
			  paddingBottom="15"
			  paddingTop="20"
			  paddingLeft="20"
			  paddingRight="20"
			  gap="10">
		<!--s:Label width="100%"
				 text="Reporting issue on Capture {captureId}"
				 fontSize="16"
				 fontWeight="bold"/-->
		<s:TextArea id="txtReport"
					width="100%"
					height="100%"
					minHeight="200"
					minWidth="400"
					maxChars="4000"
					prompt="You may add a description of the problem to help us understand the issue"
					verticalScrollPolicy="off"
					horizontalScrollPolicy="off"/>
		<s:HGroup width="100%"
				  horizontalAlign="right"
				  verticalAlign="middle">
			<s:Button label="Send"
					  click="onButtonClick(sendHandler)"/>
		</s:HGroup>
	</s:VGroup>
</s:TitleWindow>
